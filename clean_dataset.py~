import numpy as np
import pandas as pd

from pandas.plotting import scatter_matrix
from matplotlib import pyplot as plt



# funktionen definieren
# erhalte nummer des tags im jahr
def num_of_day(date):
    st_dayofyear = pd.Timestamp(year=date.year, month=1, day=1)
    day          = pd.Timestamp(year=date.year, month=date.month, day=date.day) 
    return((day - st_dayofyear).days + 1)


# entferne NaN eintraege aus spalte in dataframe
def rnan_lines(dframe, col_name):
    return(dframe[pd.notnull(dframe[col_name])])


# daten einlesen
print("Daten einlesen")

data = pd.read_csv("dataset/dataset_vim_clean.csv")
df   = pd.DataFrame(data=data)
df   = df.drop(df.columns[0], axis=1)
print(list(df), sep="\n")

print("Daten eingelesen")


# count how often which station occurs
plt.figure(1)
count_station = df["station"].value_counts()
plt.bar(x=count_station.index, height=count_station.values)
plt.show()
plt.savefig('station_hist.pdf')

plt.figure(2)
count_countys = df["county"].value_counts()
plt.bar(x=count_countys.index, height=count_countys.values)
plt.show()


# Zerlege Datum in Jahr, Tag im Jahr, Stunde (!Dauert etwas!)
dtimes = pd.Series([pd.to_datetime(dt) for dt in df["date"]]) 
years  = pd.Series([dts.year for dts in dtimes])
days   = pd.Series([num_of_day(dts) for dts in dtimes])  
hours  = pd.Series([dts.hour for dts in dtimes])

del df["date"]
df["year"]  = years
df["days"]  = days
df["hours"] = hours

print(list(df))


# erstelle DateFrames fuer jede der Stationen und loesche jeweils 'station' und 'county' (nicht mehr benoetigt)
df_dublin   = df[df["station"] == "Dublin_Airport"]
df_shannon  = df[df["station"] == "Shannon_Airport"]
df_casement = df[df["station"] == "Casement"]
df_cork     = df[df["station"] == "Cork_Airport"]
df_knock    = df[df["station"] == "Knock_Airport"]

del df_dublin["station"]
del df_shannon["station"]
del df_casement["station"]
del df_cork["station"]
del df_knock["station"]
del df_dublin["county"]
del df_shannon["county"]
del df_casement["county"]
del df_cork["county"]
del df_knock["county"]


# einzeldaten der stationen abspeichern
df.to_csv('dataset/dataset_clean.csv', encoding='utf-8')
df_dublin.to_csv('dataset/ds_dublin.csv', encoding='utf-8')
df_shannon.to_csv('dataset/ds_shannon.csv', encoding='utf-8')
df_casement.to_csv('dataset/ds_casement.csv', encoding='utf-8')
df_cork.to_csv('dataset/ds_cork.csv', encoding='utf-8')
df_knock.to_csv('dataset/ds_knock.csv', encoding='utf-8')
